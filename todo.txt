https://youtube.com/get_video_info?video_id=YbJOTdZBX1g&eurl=https%3A//www.youtube.com/watch%3Fv%3DYbJOTdZBX1g&ps=default&hl=en_US

Apply the following transformations to the data retrieved from the info URL:
  parse_qsl()- parse from URL encoding. This yields a list of (key, value) pairs.
  Pull the value associated with 'player_response'. This is the string for a JSON object.
  Convert the string to a JSON object.
  Open the 'streamingData' subobject of that object. 
  It contains a list called 'formats' of streaming data subobjects. These objects all have the following fields:
	- itag
	- url, the encrypted URL of the source video
	- mimeType, a brief description of the type of stream it is
	- bitrate
	if video:
		- width, a number
		- height, a number
		- initRange, an object
		- indexRange, an object
		- lastModified (unix timestamp?)
		- contentLength (likely in bits)
		- quality, an string adjective describing the quality
		- fps, a number
		- qualityLabel, e.g. '1080p'
		- projectionType, a string
		- averageBitrate, a number
		- colorInfo, an object
		- approxDurationMs, a string representing the number of milliseconds in the video
	if audio:
		- initRange, an object
		- indexRange, an object
		- lastModified
		- contentLength
		- quality
		- projectionType
		- averageBitrate
		- highReplication, a boolean
		- audioQuality, a string keyword (e.g. 'AUDIO_QUALITY_MEDIUM')
		- approxDurationMs
		- audioSampleRate, a string representing the integer sample rate
		- audioChannels, an integer
		- loudnessDb, a float
	See samples.png for examples of stream objects.

For videos, keep:
	- url
	- qualityLabel
	- fps
	- width and height (to allow users to confirm qualityLabel)
For audio, keep:
	- url
	- audioQuality
	- averageSampleRate
	- audioChannels

** SAMPLE ENCRYPTED URL 'signatureCipher' **
s=bAOQAOq0QJ8wRAIhAL6Wt0iH48BNJl2oEKhypedRIzyoFq9pHQyTlj0Z0VY0AiBi5dKNTw5Rea2GK__sLjvamOAl7OI7EBX40D4dQmjftA%3D%3D
&sp=sig
&url=https://r1---sn-fvf-vgql.googlevideo.com/videoplayback%3Fexpire%3D1608110729%26ei%3DKX7ZX6_mKbuDir4P1Z-ioAc%26ip%3D69.47.204.11%26id%3Do-ADbqh9cRs2rFCJZMKN6LLuQdbhLiYCschs9oZbNjjVfU%26itag%3D18%26source%3Dyoutube%26requiressl%3Dyes%26mh%3DU2%26mm%3D31%252C29%26mn%3Dsn-fvf-vgql%252Csn-5ualdnl7%26ms%3Dau%252Crdu%26mv%3Dm%26mvi%3D1%26pl%3D22%26gcr%3Dus%26initcwndbps%3D1767500%26vprv%3D1%26mime%3Dvideo%252Fmp4%26ns%3DBBa1IfwYfEwUffk_ButX5XMF%26gir%3Dyes%26clen%3D15645214%26ratebypass%3Dyes%26dur%3D249.568%26lmt%3D1577004358764790%26mt%3D1608088857%26fvip%3D3%26c%3DWEB%26txp%3D5531432%26n%3DLBlNKtpAxn4z1FL8B%26sparams%3Dexpire%252Cei%252Cip%252Cid%252Citag%252Csource%252Crequiressl%252Cgcr%252Cvprv%252Cmime%252Cns%252Cgir%252Cclen%252Cratebypass%252Cdur%252Clmt%26lsparams%3Dmh%252Cmm%252Cmn%252Cms%252Cmv%252Cmvi%252Cpl%252Cinitcwndbps%26lsig%3DAG3C_xAwRQIgS_3tjaU-umVAkAwCkiiMPjTiOCbkut1h9tYUawtSMgUCIQCrAwQvq8_kdRL3wbcIzbMcIO-EvHBEiyL88uV9-aKCjQ%253D%253D

- explode by ampersands
- explode by equals to grab code and url
- perform decipher on code
- append deciphered code to URL

The only files in this folder not involved in the frontend are:
- .htaccess
- api.php
- todo.txt (this file)